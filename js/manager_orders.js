// JavaScript –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (manager_orders.html)

let allOrders = [];
let filteredOrders = [];
let orderStatuses = {};

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤
async function loadOrderStatuses() {
  console.log('üìã –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤...');
  
  try {
    const response = await fetch('http://localhost:5000/api/orders/statuses');
    const data = await response.json();
    
    if (data.status === 'success') {
      orderStatuses = data.statuses;
      console.log('‚úÖ –°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', orderStatuses);
      populateStatusFilter();
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤:', data.message);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç—É—Å–æ–≤:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
async function loadAllOrders() {
  console.log('üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤...');
  
  const container = document.getElementById('ordersContainer');
  if (container) {
    container.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤...</div>';
  }

  try {
    const response = await fetch('http://localhost:5000/api/orders/all');
    const data = await response.json();

    if (data.status === 'success') {
      allOrders = data.orders;
      filteredOrders = [...allOrders];
      displayOrders();
      updateStats();
      updateUserFilter();
      console.log('‚úÖ –í—Å–µ –∑–∞–∫–∞–∑—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', allOrders.length);
    } else {
      showError(data.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
    showError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5000.');
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
function displayOrders() {
  const container = document.getElementById('ordersContainer');
  if (!container) return;

  if (filteredOrders.length === 0) {
    container.innerHTML = '<div class="loading">–ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
    return;
  }

  const ordersHTML = filteredOrders.map(order => createOrderRow(order)).join('');
  container.innerHTML = ordersHTML;
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –∑–∞–∫–∞–∑–∞
function createOrderRow(order) {
  const status = orderStatuses[order.status] || { name: order.status, color: '#888' };
  const createdDate = new Date(order.created_at).toLocaleDateString('ru-RU');
  const updatedDate = new Date(order.status_updated_at).toLocaleDateString('ru-RU');
  
  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
  const itemsCount = order.total_items || (order.items && order.items.length) || 0;
  const photosCount = order.total_photos || (order.items ? order.items.reduce((sum, item) => sum + (item.photos ? item.photos.length : 0), 0) : 0);

  return `
    <div class="order-row">
      <div class="order-info">
        <div class="order-id" onclick="showOrderDetails('${order.id}')">
          ${order.order_number ? `#${order.order_number}` : `ID: ${order.id}`}
        </div>
        ${!order.order_number ? `<div style="font-size: 10px; color: #666;">ID: ${order.id}</div>` : ''}
        <div class="order-user">
          üë§ ${order.full_name || order.telegram_username || '–ë–µ–∑ –∏–º–µ–Ω–∏'}
        </div>
        <div class="order-items">
          üì¶ ${itemsCount} —Ç–æ–≤–∞—Ä–æ–≤, üì∑ ${photosCount} —Ñ–æ—Ç–æ
        </div>
      </div>
      <div class="status-display" style="background: ${status.color}; color: white; padding: 8px 12px; border-radius: 20px; font-size: 12px; font-weight: bold; text-align: center; min-width: 120px;">
        ${status.name}
      </div>
      <div class="date-cell">${createdDate}</div>
      <div class="items-count">üì¶ ${itemsCount}</div>
      <div class="photos-count">üì∑ ${photosCount}</div>
      <div class="date-cell">${updatedDate}</div>
      <div class="actions">
        <button class="action-btn" style="padding: 10px 18px; font-size: 14px; margin-right: 8px;" onclick="editOrder('${order.id}')">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
        <button class="action-btn" style="padding: 10px 18px; font-size: 14px;" onclick="showOrderDetails('${order.id}')">üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä</button>
      </div>
    </div>
  `;
}

// Status updates are now handled through the edit modal

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStats() {
  const statsContainer = document.getElementById('statsContainer');
  if (!statsContainer) return;
  
  const stats = {
    total: allOrders.length,
    pending: allOrders.filter(o => o.status === 'pending').length,
    confirmed: allOrders.filter(o => o.status === 'confirmed').length,
    shipped: allOrders.filter(o => o.status === 'shipped').length,
    delivered: allOrders.filter(o => o.status === 'delivered').length
  };
  
  statsContainer.innerHTML = `
    <div class="stats-grid">
      <div class="stat-card">
        <div class="stat-number">${stats.total}</div>
        <div class="stat-label">–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤</div>
      </div>
      <div class="stat-card">
        <div class="stat-number">${stats.pending}</div>
        <div class="stat-label">–í –æ–±—Ä–∞–±–æ—Ç–∫–µ</div>
      </div>
      <div class="stat-card">
        <div class="stat-number">${stats.confirmed}</div>
        <div class="stat-label">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã</div>
      </div>
      <div class="stat-card">
        <div class="stat-number">${stats.shipped}</div>
        <div class="stat-label">–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã</div>
      </div>
    </div>
  `;
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
function populateStatusFilter() {
  const statusFilter = document.getElementById('statusFilter');
  if (!statusFilter) return;
  
  statusFilter.innerHTML = '<option value="">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>' +
    Object.keys(orderStatuses).map(status => 
      `<option value="${status}">${orderStatuses[status].name}</option>`
    ).join('');
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function updateUserFilter() {
  const userFilter = document.getElementById('userFilter');
  if (!userFilter) return;
  
  const users = [...new Set(allOrders.map(o => o.username).filter(u => u))];
  
  userFilter.innerHTML = '<option value="">–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</option>' +
    users.map(user => `<option value="${user}">${user}</option>`).join('');
}

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
function formatDate(dateString) {
  if (!dateString) return '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
  
  try {
    const date = new Date(dateString);
    return date.toLocaleString('ru-RU');
  } catch (error) {
    return dateString;
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –æ—à–∏–±–∫–∏
function showError(message) {
  const container = document.getElementById('ordersContainer');
  if (container) {
    container.innerHTML = `
      <div class="error-state">
        <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
        <p>${message}</p>
        <button class="refresh-btn" onclick="loadAllOrders()">
          üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        </button>
      </div>
    `;
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞
async function initManagerOrdersPage() {
  console.log('üë®‚Äçüíº –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
  if (!isManager()) {
    document.body.innerHTML = `
      <div class="access-denied">
        <h2>‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</h2>
        <p>–≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º</p>
        <button onclick="navigateTo('home')">üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é</button>
      </div>
    `;
    return;
  }
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –∏ –∑–∞–∫–∞–∑—ã
  await loadOrderStatuses();
  await loadAllOrders();
  
  // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  console.log('üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
  
  console.log('‚úÖ Manager orders page initialized');
}

// Status updates are now handled through the edit modal
// updateOrderStatus function removed since dropdowns are no longer used

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', initManagerOrdersPage);

console.log('‚úÖ Manager_orders.js loaded');